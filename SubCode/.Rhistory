names(AllData[[16]])[1:2] <-c("Node1", "Node2") #The name had been written differently to the other two
Transformers <- StackList(14:16)
#The RCE needs a lot of treatment as there are formatting differences and also the bind_rows part of map_df doesn't coerce, which is annoying.
names(AllData[[24]])[4] <-"MVAr.Generation"
names(AllData[[23]])[5] <-"MVAr.Absorbtion"
names(AllData[[24]])[5] <-"MVAr.Absorbtion"
AllData[[22]]$MVAr.Absorption<- AllData[[22]]$MVAr.Absorption %>%gsub("[^A-Z0-9]", "", ., ignore.case = TRUE)
RCE<- AllData[22:24] %>% map(~.x %>% RemoveSymbols %>%
mutate(Unit.Number = as.character(Unit.Number),
Connection.Voltage..kV. = as.character(Connection.Voltage..kV.)))%>%
map2_df(.x =.,
.y = names(.),
~ .x %>%
mutate(Table =.y ) )
demand <- read_excel(file.path(datafile,"ETYS16 AppG demand data.xlsx"), skip = 7)
#Percent f demand that matches a nodes
sum(unique(demand$Node) %in% unique(FullnameCounts$Name))/length(unique(demand$Node))
#check using just site this matches loads
sum(str_sub(unique(demand$Node),1,4) %in% str_sub(unique(FullnameCounts$Name),1,4))/length(unique(demand$Node))
demand2 <- FullnameCounts %>% filter(grepl("AMEM", Name))
test <- FullnameCounts %>% filter(Name %in% unique(demand$Node))
demand2 <- demand %>% filter(grepl("BEAU", Node))
Impedance <- bind_rows(mutate(Circuits, MVA=Spring.Rating..MVA.,
Type = "Circuit"),
mutate(Transformers, MVA = Rating..MVA.,
Type = "Transformer")) %>%
select(Node1, Node2, R....on.100MVA., X....on.100MVA., B....on.100MVA.,
MVA, Type) %>%
mutate(
R = R....on.100MVA./100,
X = X....on.100MVA./100,
B = B....on.100MVA./100,
MVA = round(MVA, 0),
ImpInvS = 1/B,
ImpRX =  complex(real = R, imaginary = X),
ImpInvS2 = 1/(B*MVA),
ImpRX2 = complex(real = R, imaginary = X)*MVA,
B2 = -X/(R^2+X^2)) %>%
#create the voltage matching
mutate(Node1b = str_sub(Node1, 1, 4),
Node2b = str_sub(Node2, 1, 4))
Admat<- Impedance %>%
mutate(B2 = 1/(X*MVA) ) %>%
select(Node1,Node2, B2) %>%
CreateImpedance
nrow(Admat)
union_all(rownames(Admat))
unique(rownames(Admat))
unique(rownames(Admat)) %>% length
View(CreateImpedance)
View(CreateImpedance)
Admat<- Impedance %>%
mutate(B2 = 1/(X*MVA) ) %>%
select(Node1,Node2, B2)
View(Admat)
#Create addmitance using 1/X
Admat<- Impedance %>%
mutate(B2 = 1/(X*MVA) ) %>%
select(Node1,Node2, B2) %>%
group_by(Node1,Node2) %>%
summarise(B2 = sum(B2)) %>%
CreateImpedance
nrow(Admat)
MinVolt <- Substation %>%
group_by(Site.Code) %>%
summarise(V = min(Voltage..kV.))
Voltagemaker <- left_join(data.frame(Node = colnames(Admat)),
demand, by = "Node") %>%
group_by(Node) %>%
mutate_all(funs(ifelse(is.na(.),0,1)))%>%
ungroup %>%
.[,c(1,3)] %>%
mutate(Site.Code = str_sub(Node, 1,4)) %>%
left_join(., MinVolt, by = "Site.Code") %>%
mutate(V = ifelse(is.na(V),0, V)) #some nodes don't have a site, these are set to 0
test <- CreateTransmission(Impedance, "Node1", "Node2", "B2")
CreateTransmission <- function(df, StartNode, EndNode, edgeweight){
df <- df %>% rename_(Node1 = StartNode,
Node2 = EndNode,
EdgeWeight = edgeweight) %>%
mutate(Edgename = paste(Node1,Node2, sep = "-"))
df2 <- df %>% select(Edgename, Node1, EdgeWeight)
df3 <- df %>% select(Edgename, Node2, EdgeWeight) %>%
mutate(EdgeWeight = -EdgeWeight) %>%
rename(Node1 = Node2)
df <- bind_rows(df2, df3) %>%
spread(., Node1, EdgeWeight, fil = 0)
Transmat <- df
# Transmat <- df[,1:2] %>%
#   as.matrix %>%
#   graph_from_edgelist(., directed = FALSE)
#
# E(Transmat)$weight <- as.numeric(unlist(df[,3]))
#
# Transmat <- as_adjacency_matrix(Transmat, attr = "weight") %>% as.matrix
return(Transmat)
}
test <- CreateTransmission(Impedance, "Node1", "Node2", "B2")
View(Impedance)
CreateTransmission <- function(df, StartNode, EndNode, edgeweight){
df <- df %>% rename_(Node1 = StartNode,
Node2 = EndNode,
EdgeWeight = edgeweight) %>%
group_by(Node1, Node2) %>%
mutate(Edgename = paste(Node1,Node2, 1:n(),sep = "-")) %>% ungroup
df2 <- df %>% select(Edgename, Node1, EdgeWeight)
df3 <- df %>% select(Edgename, Node2, EdgeWeight) %>%
mutate(EdgeWeight = -EdgeWeight) %>%
rename(Node1 = Node2)
df <- bind_rows(df2, df3) %>%
spread(., Node1, EdgeWeight, fil = 0)
Transmat <- df
# Transmat <- df[,1:2] %>%
#   as.matrix %>%
#   graph_from_edgelist(., directed = FALSE)
#
# E(Transmat)$weight <- as.numeric(unlist(df[,3]))
#
# Transmat <- as_adjacency_matrix(Transmat, attr = "weight") %>% as.matrix
return(Transmat)
}
test <- Impedence %>%
CreateTransmission(., "Node1", "Node2", "B2")
test <- Impedance %>%
CreateTransmission(., "Node1", "Node2", "B2")
source('~/Create_ETYS_network/Functions/CreateTransmission.R')
source('~/Create_ETYS_network/Functions/CreateTransmission.R')
CreateTransmission <- function(df, StartNode, EndNode, edgeweight){
df <- df %>% rename_(Node1 = StartNode,
Node2 = EndNode,
EdgeWeight = edgeweight) %>%
#mutate(Edgename = paste(Node1,Node2, sep = "-"))
group_by(Node1, Node2) %>% #trying to stop the non-unique identifier problem
mutate(Edgename = paste(Node1,Node2, 1:n(),sep = "-")) %>% ungroup
df2 <- df %>% select(Edgename, Node1, EdgeWeight)
df3 <- df %>% select(Edgename, Node2, EdgeWeight) %>%
mutate(EdgeWeight = -EdgeWeight) %>%
rename(Node1 = Node2)
df <- bind_rows(df2, df3) %>%
spread(., Node1, EdgeWeight, fil = 0)
Transmat <- df
# Transmat <- df[,1:2] %>%
#   as.matrix %>%
#   graph_from_edgelist(., directed = FALSE)
#
# E(Transmat)$weight <- as.numeric(unlist(df[,3]))
#
# Transmat <- as_adjacency_matrix(Transmat, attr = "weight") %>% as.matrix
return(Transmat)
}
test <- Impedance %>%
CreateTransmission(., "Node1", "Node2", "B2")
Impedance %>% select(Node1, Node2, B2) %>% slice(1976,4385)
Impedance %>% select(Node1, Node2, B2) %>% slice(c(1976,4385))
?slice
Impedance %>% select(Node1, Node2, B2) .[c(1976,4385),]
Impedance %>% select(Node1, Node2, B2) %>% .[c(1976,4385),]
52/76
1-52/76
library(igrpah); ibrary(dplyr)
#generate random graph
set.seed(500)
RandomGraph <- sample_gnm(1000, 2500)
#name nodes
V(RandomGraph)$name <- paste0("Node", 1:1000)
#Get the coordinates of the Nodes
Coords <- layout_with_fr(RandomGraph) %>%
as_tibble %>%
bind_cols(data_frame(names = names(V(RandomGraph))))
#Delete random vertices
deletevertex <-sample( V(RandomGraph)$name, 400)
RandomGraph2 <-delete.vertices(RandomGraph, deletevertex)
#get the coordinates of the remaining Nodes
NetCoords <- data_frame(names = names(V(RandomGraph2))) %>%
left_join(Coords, by= "names")
#plot both graphs
RandomGraph%>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA, layout = as.matrix(Coords[,1:2]))
RandomGraph2%>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA, layout = as.matrix(NetCoords[,2:3]))
#They nodes have the same relationship to each other but are not laid out in the same position in the frame
library(igrpah); ibrary(dplyr)
library(igraph); ibrary(dplyr)
#generate random graph
set.seed(500)
RandomGraph <- sample_gnm(1000, 2500)
#name nodes
V(RandomGraph)$name <- paste0("Node", 1:1000)
#Get the coordinates of the Nodes
Coords <- layout_with_fr(RandomGraph) %>%
as_tibble %>%
bind_cols(data_frame(names = names(V(RandomGraph))))
#Delete random vertices
deletevertex <-sample( V(RandomGraph)$name, 400)
RandomGraph2 <-delete.vertices(RandomGraph, deletevertex)
#get the coordinates of the remaining Nodes
NetCoords <- data_frame(names = names(V(RandomGraph2))) %>%
left_join(Coords, by= "names")
#plot both graphs
RandomGraph%>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA, layout = as.matrix(Coords[,1:2]))
RandomGraph2%>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA, layout = as.matrix(NetCoords[,2:3]))
#They nodes have the same relationship to each other but are not laid out in the same position in the frame
library(igraph); library(dplyr)
#generate random graph
set.seed(500)
RandomGraph <- sample_gnm(1000, 2500)
#name nodes
V(RandomGraph)$name <- paste0("Node", 1:1000)
#Get the coordinates of the Nodes
Coords <- layout_with_fr(RandomGraph) %>%
as_tibble %>%
bind_cols(data_frame(names = names(V(RandomGraph))))
#Delete random vertices
deletevertex <-sample( V(RandomGraph)$name, 400)
RandomGraph2 <-delete.vertices(RandomGraph, deletevertex)
#get the coordinates of the remaining Nodes
NetCoords <- data_frame(names = names(V(RandomGraph2))) %>%
left_join(Coords, by= "names")
#plot both graphs
RandomGraph%>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA, layout = as.matrix(Coords[,1:2]))
RandomGraph2%>%
plot(.,vertex.size=.8, edge.arrow.size=.4, vertex.label = NA, layout = as.matrix(NetCoords[,2:3]))
#They nodes have the same relationship to each other but are not laid out in the same position in the frame
library(dplyr);library(rlang)
OtherStuff <-c(10, NA)
#This quo of mean takes the vector "otherStuff" and the as yet undefined variable "vector"
EvaluateThisNow <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc <- function(vector, TheFunction){
#uses the captire environment which doesn't contain the object vector
print(get_env(TheFunction))
#Reset the enivronment of TheFunction to the current environment where vector exists
# TheFunction<- set_env(TheFunction, get_env())
print(get_env(TheFunction))
#The supplied function is now evaluated inside the MyFunc environment using "OtherStuff" and the variable "vector" which is defined inside MyFunc
print(TheFunction)
TheFunction %>%
eval_tidy
}
MyFunc(1:4, EvaluateThisNow)
rm(OtherStuff)
set.seed(123)
1:3 %>% map(~{
#assigned inside local environment
OtherStuff <-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
library(tidyverse);library(rlang)
rm(OtherStuff)
set.seed(123)
1:3 %>% map(~{
#assigned inside local environment
OtherStuff <-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
set.seed(123)
1:3 %>% map(~{
#assigned inside local environment
OtherStuff <<-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
OtherStuff <-c(10, NA)
c(TRUE, FALSE, TRUE) %>% map(~{
val <- .x
print(val)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = val))
MyFunc(1:4, EvaluateThis)
})
#assigned inside local environment
OtherStuff <<-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
set.seed(123)
1:3 %>% map(~{
#assigned inside local environment
OtherStuff <<-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
MyFunc <- function(vector, TheFunction){
#uses the captire environment which doesn't contain the object vector
print(get_env(TheFunction))
# (do not reset the environment)
print(get_env(TheFunction))
#The supplied function is now evaluated inside the MyFunc environment using "OtherStuff" and the variable "vector" which is defined inside MyFunc
print(TheFunction)
eval_tidy(TheFunction, data = list(vector = vector))
}
rm(OtherStuff)
set.seed(123)
1:3 %>% map(~{
#assigned inside local environment
OtherStuff <-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
set.seed(123)
1:3 %>% map(~{
#assigned inside local environment
OtherStuff <<-c(sample(1:10, 1), NA)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = TRUE))
MyFunc(1:4, EvaluateThis)
})
OtherStuff <-c(10, NA)
c(TRUE, FALSE, TRUE) %>% map(~{
val <- .x
print(val)
EvaluateThis <-quo(mean(c(vector,OtherStuff), na.rm = val))
MyFunc(1:4, EvaluateThis)
})
probs <- c(107,10,39,18,291,83,12,9,431) %>% matrix(., nrow = 3, byrow = T)
packages <- c("tidyverse", "igraph","readr","readxl", "broom", "zoo", "stringr","foreach", "doMC",  "xtable", "geomnet", "ggnetwork", "rlang", "animation", "readr", "imager", "lubridate")
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = TRUE)
probs <- c(107,10,39,18,291,83,12,9,431) %>% matrix(., nrow = 3, byrow = T)
View(probs)
107/(107+18+12)
291/(291+10+9)
library(tidyverse);library(rlang)
set.seed(3246)
rnormvect <- c(rnorm(2500, sd = 2),rpois(2500, 2))
mean(rnormvect)
var(rnormvect)
NumberofObs <- 1000
test2 <- 1:1000 %>% map_df(~{
test <- data.frame(type = "big", values = sample(rnormvect, NumberofObs, replace = T))
data.frame(mean = mean(test$values), var = var(test$values), iter =  .x)
}
) %>%
mutate(type = "big")
GroupSize <- 1
groupvect <-rep_along(rnormvect, 1:(NumberofObs/GroupSize))
NumGroups  <- max(groupvect)
NumGroups
test3 <- 1:1000 %>% map_df(~{
test <- 1:NumGroups %>% map(~{sample(rnormvect[groupvect==.x], GroupSize, replace = T)}) %>%
unlist
data.frame(mean = mean(test), var = var(test), iter = .x)
}
) %>%
mutate(type = "small")
test4 <- bind_rows(test2, test3) %>%
group_by(type) %>%
summarise_all(c("mean", "var"))
test4[1,-1]/test4[2,-1]
bind_rows(test2, test3) %>%
ggplot(., aes(x = type, y = mean)) + geom_boxplot()
?bind_rows
test3b <- 1:1000 %>% map_df(~{
test <- 1:NumGroups %>% map(~{sample(rnormvect[groupvect==.x], GroupSize*10, replace = T)}) %>%
unlist
data.frame(mean = mean(test), var = var(test), iter = .x)
}
) %>%
mutate(type = "smallbig")
test4 <- bind_rows(test2, test3, test3b) %>%
group_by(type) %>%
summarise_all(c("mean", "var"))
test4[1,-1]/test4[2,-1]
bind_rows(test2, test3) %>%
ggplot(., aes(x = type, y = mean)) + geom_boxplot()
bind_rows(test2, test3, test3b) %>%
ggplot(., aes(x = type, y = mean)) + geom_boxplot()
plot(density(rnormvect))
mean(rnormvect)
var(rnormvect)
bind_rows(test2, test3, test3b) %>%
group_by(type) %>%
summarise_all(c("mean", "var"))
data_frame(vector = rnormvect) %>%
ggplot(aes(x = vector)) +
geom_density()
data_frame(vector = rnormvect) %>%
ggplot(aes(x = vector)) +
geom_density() +
labs(title = "Distribution density")
data_frame(vector = rnormvect) %>%
ggplot(aes(x = vector)) +
geom_density() +
labs(title = "Distribution density", x = "range")
bind_rows(test2, test3) %>%
ggplot(., aes(x = type, y = var)) + geom_boxplot()
bind_rows(test2, test3, test3b) %>%
ggplot(., aes(x = type, y = var)) + geom_boxplot()
bind_rows(test2, test3, test3b) %>%
ggplot(., aes(x = type, y = mean)) + geom_boxplot()
NumberofObs <- 1000
test2 <- 1:1000 %>% map_df(~{
test <- data.frame(type = "big", values = sample(rnormvect, NumberofObs, replace = T))
data.frame(mean = mean(test$values), var = var(test$values), iter =  .x)
}
) %>%
mutate(type = "basic, obs:1000")
GroupSize <- 1
groupvect <-rep_along(rnormvect, 1:(NumberofObs/GroupSize))
NumGroups  <- max(groupvect)
NumGroups
test3 <- 1:1000 %>% map_df(~{
test <- 1:NumGroups %>% map(~{sample(rnormvect[groupvect==.x], GroupSize, replace = T)}) %>%
unlist
data.frame(mean = mean(test), var = var(test), iter = .x)
}
) %>%
mutate(type = "sub groups, obs:1000")
test3b <- 1:1000 %>% map_df(~{
test <- 1:NumGroups %>% map(~{sample(rnormvect[groupvect==.x], GroupSize*10, replace = T)}) %>%
unlist
data.frame(mean = mean(test), var = var(test), iter = .x)
}
) %>%
mutate(type = "sub groups, obs:10000")
test4 <- bind_rows(test2, test3, test3b) %>%
group_by(type) %>%
summarise_all(c("mean", "var"))
test4[1,-1]/test4[2,-1]
bind_rows(test2, test3, test3b) %>%
ggplot(., aes(x = type, y = mean)) + geom_boxplot() +
labs(title = "Boxplot of the means using different sampling techniques")
data_frame(vector = rnormvect) %>%
ggplot(aes(x = vector)) +
geom_density() +
labs(title = "Distribution density", x = "range")
data.frame(type = "none", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005))
data.frame(type = "Some", year = c(2011,2013,2008,2008,2009))
data.frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
setwd("/home/jonno/Create_ETYS_network/SubCode")
source("Setup.R")
data.frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data.frame(type = "Some", year = c(2011,2013,2008,2008,2009))
bind_rows(
data.frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data.frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data.frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
)
bind_rows(
data_frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
)
data_frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
)
TypeYear<- bind_rows(
data_frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
)
table(TypeYear$type)
21+16+5
TypeYear %>%
ggplot(aes(x= year, colour = Type)) + geom_histogram()
TypeYear %>%
ggplot(aes(x= year, colour = type)) + geom_histogram()
TypeYear %>%
ggplot(aes(x= year, fill = type)) + geom_histogram()
TypeYear %>%
ggplot(aes(x= year, fill = type)) + geom_histogram(position = "dodge")
TypeYear<- bind_rows(
data_frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
) %>%
mutate(Type = ifelse(type = "Some", "Power Flow", type))
TypeYear<- bind_rows(
data_frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
) %>%
mutate(Type = ifelse(type == "Some", "Power Flow", type))
TypeYear %>%
ggplot(aes(x= year, fill = type)) + geom_histogram(position = "dodge")
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_histogram(position = "dodge")
table(TypeYear$year)
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_freqpoly()
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_histogram()
TypeYear<- bind_rows(
data_frame(type = "None", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Some", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
) %>%
mutate(Type = ifelse(type == "Some", "Power Flow", type),
year = as.numeric(year))
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_histogram()
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_bar()
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_bar(position = "dodge")
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_bar(position = "dodge") +
labs(title = "Power grid as a complex network: Publication type by year")
TypeYear<- bind_rows(
data_frame(type = "Topo", year = c(2000,2002,2004,2004,2005,2007,2008,2006,2005,2007,2007,2004,2005,2009,2010,2009,2012,2007,2011,2004,2005)),
data_frame(type = "Extended", year = c(2011,2013,2008,2008,2009)),
data_frame(type = "Power Flow", year = c(2009,2010,2009,2007,2010,2010,2010,2011,2013,2010,2013,2014,2015,2011,2012,2012))
) %>%
mutate(Type = ifelse(type == "Power Flow", "Extended", type),
year = as.numeric(year))
TypeYear %>%
ggplot(aes(x= year, fill = Type)) + geom_bar(position = "dodge") +
labs(title = "Power grid as a complex network: Publication type by year")
